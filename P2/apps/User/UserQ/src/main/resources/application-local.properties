spring.application.name=psoft-g1

##
## Profiles
##
spring.profiles.active=bootstrap

## google login
spring.security.oauth2.client.registration.google.client-id=820399938872-336o4vp7cfotji29i1eejbg3kdveotlu.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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

##facebook login
spring.security.oauth2.client.registration.facebook.client-id=973590167852896
spring.security.oauth2.client.registration.facebook.client-secret=4d2df96de96ac6c0ec1ba2e768d53b46

#Thymeleaf
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML5
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.cache=false

##
## OpenAPI
##
springdoc.api-docs.enabled=true
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui

##
## JWT
##
jwt.private.key=classpath:rsa.private.key
jwt.public.key=classpath:rsa.public.key

##
## KAFKA
##
spring.kafka.bootstrap-servers=http://localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.consumer.auto-offset-reset=earliest

## DOCKER HOSTNAME
docker.name=local

##
## DATABASES

##
## datasource
##
# 2 - H2 with JPA
data.model=2
id.generator=1

#spring.datasource.url=jdbc:h2:tcp://localhost/~/psoft-g1;IGNORECASE=TRUE
# ^ H2 Console needs to be running, and file needs to be previously created in path ^
spring.datasource.url=jdbc:h2:~/psoft-g1
# ^ H2 Console CAN'T be running, and file needs to be previously created in path ^
#spring.datasource.url=jdbc:h2:mem:testdb
# ^ No prerequisites ^
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=mysqluser
spring.datasource.password=mysqlpass
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#spring.jpa.hibernate.dialect=org.hibernate.dialect.H2Dialect

## show SQL
spring.jpa.show-sql=false
#hibernate.show_sql=false
#spring.jpa.hibernate.format_sql=true
#Ricardo: what is this for?

## database schema generation
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=create-drop

##
## H2 console for development purposes.
## e.g., http://localhost:8080/h2-console
##
## for security reasons this setting should be false
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

##
## MULTIPART (MultipartProperties)
##
# Enable multipart uploads
spring.servlet.multipart.enabled=true
# Threshold after which files are written to disk.
spring.servlet.multipart.file-size-threshold=2KB
# Max file size.
spring.servlet.multipart.max-file-size=200MB
# Max Request Size
spring.servlet.multipart.max-request-size=215MB

##
## File Storage Properties
##
# All files uploaded through the REST API will be stored in this directory
file.upload-dir=uploads-psoft-g1
#Maximum photo size -> in bytes | by the rules of the forum it's 20KB
file.photo_max_size=20000

## Api Ninjas key
my.ninjas-key=a5nSlaa4JxIubY09H+NYuQ==cY9FegnFmAvYi6fN
