properties([
    parameters([
        choice(
            name: 'ENV',
            choices: ['development', 'testing', 'production'],
            description: 'Select the environment for deployment'
        )
    ])
])

node {
    def DOCKER_CREDENTIALS_ID = 'docker-hub-credentials'
    def DOCKER_IMAGE = 'populate-dbs-image'
    def DOCKER_REGISTRY = 'hellensantos'
    def DOCKERFILE_PATH = 'P2/apps/Bootstrapper/Dockerfile'
    def STACK_NAME = "populate-databases-${params.ENV}"
    def COMPOSE_FILE = 'P2/docker-swarm/populate-databases.yml'
    env.ENV_FILE = "${params.ENV}.env"

    try {
        stage('Checkout') {
            echo "Checking out source code"
            checkout([$class: 'GitSCM', branches: [[name: '*/main']], userRemoteConfigs: [[url: 'https://github.com/padrinoski/odsoft-project-2024.git']]])
        }

        stage('Build') {
            echo "Building Docker image ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${params.ENV}"
            def image = docker.build("${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${params.ENV}", "-f ${DOCKERFILE_PATH} P2/apps/Bootstrapper")
        }

        stage('Push') {
            echo "Pushing Docker image to ${DOCKER_REGISTRY}"
            docker.withRegistry("", DOCKER_CREDENTIALS_ID) {
                docker.image("${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${params.ENV}").push()
            }
        }

        stage('Deploy') {
            echo "Deploying to ${params.ENV} environment"

            // Ensure the compose file exists
            sh "test -f ${COMPOSE_FILE} || (echo 'Compose file not found for ${params.ENV}' && exit 1)"
            
            // Deploy the stack with the appropriate .env file
            sh """
                docker stack deploy \
                    --with-registry-auth \
                    --compose-file ${COMPOSE_FILE} \
                    ${STACK_NAME}
            """
            
            // Wait for services to be running
            sh """
                ATTEMPTS=0
                MAX_ATTEMPTS=30
                until docker stack services ${STACK_NAME} | grep -q '1/1' || [ \$ATTEMPTS -eq \$MAX_ATTEMPTS ]; do
                    echo "Waiting for services to be ready..."
                    sleep 10
                    ATTEMPTS=\$((ATTEMPTS+1))
                done
                
                if [ \$ATTEMPTS -eq \$MAX_ATTEMPTS ]; then
                    echo "Service deployment timed out"
                    exit 1
                fi
            """
        }

        stage('Test') {
            echo "Running tests for ${params.ENV} environment"
            // Add your test logic here
        }

    } catch (Exception e) {
        currentBuild.result = 'FAILURE'
        echo "Build failed: ${e.message}"
        throw e
    } finally {
        stage('Cleanup') {
            echo 'Cleaning up Docker system'
            // deleteDir()
            sh 'docker system prune -f'
        }
    }
}